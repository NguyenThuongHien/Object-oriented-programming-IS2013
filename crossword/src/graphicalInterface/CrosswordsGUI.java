package graphicalInterface;

import java.awt.print.PrinterException;
import java.io.IOException;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import Exceptions.FailedToGenerateCrosswordException;
import Exceptions.FailedToLoadAllCwsException;
import board.Strategy;
import browser.CwBrowser;
import com.itextpdf.text.DocumentException;
import dictionary.IntelLiCwDB;

/**
 *
 * @author wukat
 */
public class CrosswordsGUI extends javax.swing.JFrame {

    /**
     * Function checks and sets buttons to enable or disable state
     */
    public final void actualizeButtons() {
        if (browser.isLastUsedNextButton()) {
            nextButton.setEnabled(browser.hasNext());
            prevButton.setEnabled(browser.previousIndex() > 0);
        } else {
            prevButton.setEnabled(browser.hasPrevious());
            nextButton.setEnabled(browser.nextIndex() < browser
                    .getAmountOfCrosswords());
        }
        saveButton.setEnabled(browser.hasActual());
        solveButton.setEnabled(browser.hasActual());
        printButton.setEnabled(browser.hasActual());
        toPDFButton.setEnabled(browser.hasActual());
    }

    /**
     * Creates new form ProgramNB
     */
    public CrosswordsGUI() {
        try {
            browser = new CwBrowser(null);
        } catch (IOException e) {
            Object[] options = {"Yes", "No",};
            int n = JOptionPane
                    .showOptionDialog(
                            null,
                            "Failed to load default data base. Do you want to choose it manually?",
                            "Failed to start",
                            JOptionPane.YES_NO_OPTION,
                            JOptionPane.ERROR_MESSAGE, null, options,
                            options[0]);

            if (n == 0) {
                JFileChooser fc = new JFileChooser();
                int returnVal = fc.showDialog(fc, "Import database");
                if (returnVal == JFileChooser.APPROVE_OPTION) {
                    try {
                        browser = new CwBrowser(fc.getSelectedFile()
                                .getAbsolutePath());
                        new CrosswordsGUI().setVisible(true);

                    } catch (IOException a) {
                        JOptionPane.showMessageDialog(null,
                                "Failed to load data base.",
                                "Failed to start",
                                JOptionPane.ERROR_MESSAGE);
                    }
                } else {
                    JOptionPane.showMessageDialog(null,
                            "Operation canceled, program halts.",
                            "Failed to start",
                            JOptionPane.ERROR_MESSAGE);
                }
            } else {
                JOptionPane.showMessageDialog(null,
                        "Operation denied, program halts.",
                        "Failed to start", JOptionPane.ERROR_MESSAGE);
            }
        }

        initComponents();
        actualizeButtons();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed"
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonStrategyGropu = new javax.swing.ButtonGroup();
        generatePanel = new javax.swing.JPanel();
        easy = new javax.swing.JRadioButton();
        hard = new javax.swing.JRadioButton();
        columnsLabel = new javax.swing.JLabel();
        rowsLabel = new javax.swing.JLabel();
        columns = new javax.swing.JSpinner();
        rows = new javax.swing.JSpinner();
        generateButton = new javax.swing.JButton();
        fromFilePanel = new javax.swing.JPanel();
        importLabel = new javax.swing.JLabel();
        importButton = new javax.swing.JButton();
        loadLabel = new javax.swing.JLabel();
        loadButton = new javax.swing.JButton();
        optionsPanel = new javax.swing.JPanel();
        solveButton = new javax.swing.JButton();
        printButton = new javax.swing.JButton();
        toPDFButton = new javax.swing.JButton();
        browsePanel = new javax.swing.JPanel();
        prevButton = new javax.swing.JButton();
        nextButton = new javax.swing.JButton();
        saveButton = new javax.swing.JButton();
        crosswordPanel = new javax.swing.JPanel();
        crosswordSPanel = new javax.swing.JScrollPane();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Crosswords by wukat");

        generatePanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Generate"));

        buttonStrategyGropu.add(easy);
        easy.setSelected(true);
        easy.setText("Easy");

        buttonStrategyGropu.add(hard);
        hard.setText("Hard");

        columnsLabel.setText("Columns");

        rowsLabel.setText("Rows");

        columns.setModel(new javax.swing.SpinnerNumberModel(5, 2, 15, 1));

        rows.setModel(new javax.swing.SpinnerNumberModel(5, 2, 15, 1));

        generateButton.setText("Generate");
        generateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generateButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout generatePanelLayout = new javax.swing.GroupLayout(generatePanel);
        generatePanel.setLayout(generatePanelLayout);
        generatePanelLayout.setHorizontalGroup(
            generatePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(generatePanelLayout.createSequentialGroup()
                .addGroup(generatePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(generatePanelLayout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addGroup(generatePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(generatePanelLayout.createSequentialGroup()
                                .addComponent(easy)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(hard))
                            .addGroup(generatePanelLayout.createSequentialGroup()
                                .addGroup(generatePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(columnsLabel)
                                    .addComponent(rowsLabel))
                                .addGap(18, 18, 18)
                                .addGroup(generatePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(columns, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(rows, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                    .addGroup(generatePanelLayout.createSequentialGroup()
                        .addGap(29, 29, 29)
                        .addComponent(generateButton)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        generatePanelLayout.setVerticalGroup(
            generatePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(generatePanelLayout.createSequentialGroup()
                .addGroup(generatePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(easy)
                    .addComponent(hard))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(generatePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(columnsLabel)
                    .addComponent(columns, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(generatePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rows, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(rowsLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(generateButton))
        );

        fromFilePanel.setBorder(javax.swing.BorderFactory.createTitledBorder("From file"));

        importLabel.setText("Import database");

        importButton.setText("Choose file");
        importButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                importButtonActionPerformed(evt);
            }
        });

        loadLabel.setText("Load crosswords");

        loadButton.setText("Choose folder");
        loadButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout fromFilePanelLayout = new javax.swing.GroupLayout(fromFilePanel);
        fromFilePanel.setLayout(fromFilePanelLayout);
        fromFilePanelLayout.setHorizontalGroup(
            fromFilePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(fromFilePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(fromFilePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(fromFilePanelLayout.createSequentialGroup()
                        .addGroup(fromFilePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(importLabel)
                            .addComponent(loadLabel))
                        .addGap(0, 41, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, fromFilePanelLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(fromFilePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(importButton, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(loadButton, javax.swing.GroupLayout.Alignment.TRAILING))))
                .addContainerGap())
        );
        fromFilePanelLayout.setVerticalGroup(
            fromFilePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(fromFilePanelLayout.createSequentialGroup()
                .addComponent(importLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(importButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(loadLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(loadButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        optionsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Options"));

        solveButton.setText("Solve");
        solveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                solveButtonActionPerformed(evt);
            }
        });

        printButton.setText("Print");
        printButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                printButtonActionPerformed(evt);
            }
        });

        toPDFButton.setText("toPDF");
        toPDFButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                toPDFButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout optionsPanelLayout = new javax.swing.GroupLayout(optionsPanel);
        optionsPanel.setLayout(optionsPanelLayout);
        optionsPanelLayout.setHorizontalGroup(
            optionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(optionsPanelLayout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addComponent(solveButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(printButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(toPDFButton)
                .addContainerGap())
        );
        optionsPanelLayout.setVerticalGroup(
            optionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(optionsPanelLayout.createSequentialGroup()
                .addGroup(optionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(solveButton)
                    .addComponent(printButton)
                    .addComponent(toPDFButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        browsePanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Browse"));

        prevButton.setText("Prev");
        prevButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                prevButtonActionPerformed(evt);
            }
        });

        nextButton.setText("Next");
        nextButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextButtonActionPerformed(evt);
            }
        });

        saveButton.setText("Save");
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout browsePanelLayout = new javax.swing.GroupLayout(browsePanel);
        browsePanel.setLayout(browsePanelLayout);
        browsePanelLayout.setHorizontalGroup(
            browsePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(browsePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(prevButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(nextButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(saveButton)
                .addContainerGap())
        );
        browsePanelLayout.setVerticalGroup(
            browsePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(browsePanelLayout.createSequentialGroup()
                .addGroup(browsePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(prevButton)
                    .addComponent(saveButton)
                    .addComponent(nextButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        crosswordPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Crossword"));

        crosswordSPanel.setBackground(new java.awt.Color(-1,true));
        crosswordSPanel.setAutoscrolls(true);

        browser.getDrawingPane().setBackground(new java.awt.Color(-1,true));
        browser.getDrawingPane().setAutoscrolls(true);
        browser.getDrawingPane().setDoubleBuffered(false);

        javax.swing.GroupLayout drawingPaneLayout = new javax.swing.GroupLayout(browser.getDrawingPane());
        browser.getDrawingPane().setLayout(drawingPaneLayout);
        drawingPaneLayout.setHorizontalGroup(
            drawingPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 841, Short.MAX_VALUE)
        );
        drawingPaneLayout.setVerticalGroup(
            drawingPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 451, Short.MAX_VALUE)
        );

        crosswordSPanel.setViewportView(browser.getDrawingPane());

        javax.swing.GroupLayout crosswordPanelLayout = new javax.swing.GroupLayout(crosswordPanel);
        crosswordPanel.setLayout(crosswordPanelLayout);
        crosswordPanelLayout.setHorizontalGroup(
            crosswordPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(crosswordSPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 603, Short.MAX_VALUE)
        );
        crosswordPanelLayout.setVerticalGroup(
            crosswordPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(crosswordSPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 469, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(crosswordPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(generatePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(12, 12, 12)
                        .addComponent(fromFilePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(browsePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(optionsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(optionsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(browsePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(generatePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(fromFilePanel, 0, 0, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(crosswordPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Action when loadButton pressed - choosing folder with crosswords and
     * loading it (exceptions handled)
     *
     * @param evt - event
     */
    private void loadButtonActionPerformed(java.awt.event.ActionEvent evt) {
        JFileChooser fc = new JFileChooser();
        fc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        if (fc.showDialog(loadButton, "Open directory") == JFileChooser.APPROVE_OPTION) {
            try {
                browser.loadFromFiles(fc.getSelectedFile().getPath());
            } catch (FailedToLoadAllCwsException e) {
                JOptionPane.showMessageDialog(null, e.getMessage());
            } catch (IOException e) {
                JOptionPane.showMessageDialog(null, e.getMessage(),
                        "Operation failed", JOptionPane.ERROR_MESSAGE);
            } catch (NumberFormatException e) {
                JOptionPane
                        .showMessageDialog(
                                null,
                                "Wrong type file found in directory or file name not proper.",
                                "Operation failed", JOptionPane.ERROR_MESSAGE);
            }
        }
        actualizeButtons();
    }

    /**
     * Action when the importButton pressed, choosing database file (exceptions
     * handled)
     *
     * @param evt - event
     */
    private void importButtonActionPerformed(java.awt.event.ActionEvent evt) {
        JFileChooser fc = new JFileChooser();
        FileNameExtensionFilter filter = new FileNameExtensionFilter(".txt",
                "txt");
        fc.setAcceptAllFileFilterUsed(false);
        fc.setFileFilter(filter);

        if (fc.showDialog(importButton, "Import") == JFileChooser.APPROVE_OPTION) {
            try {
                browser.setDefaultCwDB(new IntelLiCwDB(fc.getSelectedFile()
                        .getPath()));
            } catch (IOException e) {
                JOptionPane.showMessageDialog(null,
                        "Failed to import database from file.",
                        "Operation failed", JOptionPane.ERROR_MESSAGE);
            }
        }
    }

    /**
     * Action when generateButton pressed, trying to generate crossword
     * (exceptions handled)
     *
     * @param evt - event
     */
    private void generateButtonActionPerformed(java.awt.event.ActionEvent evt) {
        try {
            browser.generateCw(
                    Integer.parseInt(columns.getValue().toString()),
                    Integer.parseInt(rows.getValue().toString()),
                    hard.isSelected() ? Strategy.hardStrategyID : Strategy.easyStrategyID);
            actualizeButtons();
        } catch (FailedToGenerateCrosswordException e) {
            JOptionPane.showMessageDialog(null,
                    "Failed to generate crossword from this database.",
                    "Operation failed", JOptionPane.ERROR_MESSAGE);
        }
    }

    /**
     * Action when solve button pressed, painting solveable crossword
     *
     * @param evt
     */
    private void solveButtonActionPerformed(java.awt.event.ActionEvent evt) {
        browser.paintSolveable();
    }

    /**
     * Action when print button pressed, printing (exceptions handled)
     *
     * @param evt - event
     */
    private void printButtonActionPerformed(java.awt.event.ActionEvent evt) {
        try {
            browser.print();
        } catch (PrinterException ex) {
            JOptionPane.showMessageDialog(null,
                    "Failed to print crossword.", "Operation failed",
                    JOptionPane.ERROR_MESSAGE);
        }
    }

    /**
     * Action when prevButton pressed, setting actual crossword to previous
     * crossword in list of crosswords; pressing possible only if there's
     * previous element
     *
     * @param evt - event
     */
    private void prevButtonActionPerformed(java.awt.event.ActionEvent evt) {
        browser.previous();
        actualizeButtons();
    }

    /**
     * Action when nextButton pressed, setting actual crossword to next
     * crossword in list of crosswords; pressing possible only if there's next
     * element
     *
     * @param evt - event
     */
    private void nextButtonActionPerformed(java.awt.event.ActionEvent evt) {
        browser.next();
        actualizeButtons();
    }

    /**
     * Action when saveButton pressed, saves actual crossword in choosen
     * directory (exceptions handled)
     *
     * @param evt - event
     */
    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {
        JFileChooser fc = new JFileChooser();
        fc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        if (fc.showDialog(saveButton, "Save in directory") == JFileChooser.APPROVE_OPTION) {
            try {
                browser.saveActual(fc.getSelectedFile().getPath());
            } catch (IOException e) {
                JOptionPane.showMessageDialog(null,
                        "Failed to save crossword.", "Operation failed",
                        JOptionPane.ERROR_MESSAGE);
            }
        }
    }

    /**
     * Action when toPDF button pressed, creating pdf (exceptions handled)
     *
     * @param evt
     */
    private void toPDFButtonActionPerformed(java.awt.event.ActionEvent evt) {
        JFileChooser fc = new JFileChooser();
        fc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);

        if (fc.showDialog(null, "Save pdf in directory") == JFileChooser.APPROVE_OPTION) {
            try {
                browser.toPDF(fc.getSelectedFile().getPath());
            } catch (DocumentException e) {
                JOptionPane.showMessageDialog(null,
                        "Failed to create pdf.", "Operation failed",
                        JOptionPane.ERROR_MESSAGE);
            } catch (IOException e) {
                JOptionPane.showMessageDialog(null,
                        "Failed to save crossword pdf in this directory.", "Operation failed",
                        JOptionPane.ERROR_MESSAGE);
            }
        }

    }

    private static CwBrowser browser; // crosswords browser instance
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel browsePanel;
    private javax.swing.ButtonGroup buttonStrategyGropu;
    private javax.swing.JSpinner columns;
    private javax.swing.JLabel columnsLabel;
    private javax.swing.JPanel crosswordPanel;
    private javax.swing.JScrollPane crosswordSPanel;
    private javax.swing.JRadioButton easy;
    private javax.swing.JPanel fromFilePanel;
    private javax.swing.JButton generateButton;
    private javax.swing.JPanel generatePanel;
    private javax.swing.JRadioButton hard;
    private javax.swing.JButton importButton;
    private javax.swing.JLabel importLabel;
    private javax.swing.JButton loadButton;
    private javax.swing.JLabel loadLabel;
    private javax.swing.JButton nextButton;
    private javax.swing.JPanel optionsPanel;
    private javax.swing.JButton prevButton;
    private javax.swing.JButton printButton;
    private javax.swing.JSpinner rows;
    private javax.swing.JLabel rowsLabel;
    private javax.swing.JButton saveButton;
    private javax.swing.JButton solveButton;
    private javax.swing.JButton toPDFButton;
    // End of variables declaration//GEN-END:variables
}
